#+title: Navigate With Turbo Drive
Trubo Driveは、ページレベルのナビゲーションを強化するTurboの一部。
リンクのクリックやフォームの送信を監視して、バックグランドでそれらを実行し、完全なリロードを行うことなくページを更新する。
* Page Navigation Basics
- visitはクリックからレンダリングまでのナビゲーションのライフサイクル全体を表す。
  ブラウザ履歴の変更、ネットワーク要求の発行、キャッシュからページのコピーの復元、スクロールの位置が含まれる。
- レンダリング中、リクエスト・ドキュメント<body>の内容をレスポンス・ドキュメントの内容き置き換える。
  <head>の内容も。<html>のlang属性を更新することもあるらしい。
- visitには2種類あって、application visitとrestoration visitがある。
* Application Visits
- turbo drive対応のリンクをクリックするか、Turbo.visit(location)を呼日出すことで使用できる。
  可能な場合、visitの際にキャッシュからページのプレビューをレンダリングする。
  visit先にアンカーが含まれている場合、turbo driveはアンカー要素までスクロールしようとする。ない場合はページの一番下までする。
  Aplication visits result in a change to the browser's history
- defaultのvisitアクションはadvance。history.pushStateを使用して、ブラウザの履歴スタックに新しいエントリをプッシュする。
- replace visitアクションはhistory.replaceStateを使用して、一番上のhistoryエントリを破棄し、新しい場所に置き換える。
  こうすることで、新しいhistoryエントリをstackにプッシュすることなく、visitできる。
  linkをたどってvisitをreplaceするように指定する場合、linkにdata-turbo-action="replace"をつける
  #+begin_src html
  <!-- URLを書き換えないという認識 -->
  <a href="/edit" data-turbo-action="replace">Edit</a>
  #+end_src
  #+begin_src js
  Turbo.visit("/edit", { action: "replace" })
  #+end_src
* Restoration Visits
- turbo driveはブラウザの戻るまたは進むボタンでnavigateすると、restoration visitを自動で行う。
  可能であれば、リクエストを行わずにキャッシュからページのコピーをレンダリングする。
  できなければ、ネットワーク経由でページの新しいコピーを取得する。
- navigateする前に各ページのスクロール位置を保存し、restoration visit時に保存位置に自動で戻る。
  内部的に使用されているので、明示的に呼び出すことはほぼないという認識。
* Canceling Visits Before They Start
- linkのクリックやTurbo.visitの呼び出されたかに関係なく、application visitは開始前にキャンセルできる。
  turbo:before-visitイベントをlistenし、visitが始まろうとしている際に通知を受け、event.detail.urlを使用してvisitの場所を把握する。
  そしてevent.preventDefault()を呼び出してvisitをキャンセルする。
- restoration visitsはキャンセルできない。turbo:before-visitは起動しない。
* Custom Rendering
- ドキュメント全体のturbo:before-renderイベントリスナーを追加し、event.detail.renderプロパティをoverrideすることで、
  レンダリングプロセスをカスタマイズできる。
  #+begin_src js
  import { Idiomorph } from "idiomorph"

  addEventListener("turbo:before-render", (event) => {
    event.detail.render = (currentElement, newElement) => {
      Idiomorph.morph(currentElement, newElement)
    }
  })
  #+end_src
  どういうときにカスタマイズしたくなるのだろう？
* Pausing Rendering
- applicationはレンダリングを一時停止し、追加することができる
  turbo:before-renderイベントをlistenして、レンダリングが開始されそうになったときに通知を受け、event.preventDefault()を使用して
  レンダリングを一時停止する。準備ができたらevent.detail.resume()を呼び出してレンダリングを続行する。
  #+begin_src js
  // visitする際の退出アニメーションとかで使う
  document.addEventListener("turbo:before-render", async (event) => {
    event.preventDefault()
    await animateOut()
    event.detail.resume()
  })
  #+end_src
* Pausing Requests
- applicationはリクエストを一時停止し、追加することができる
  turbo:before-fetch-requestイベントをlistenして、リクエストが開始されそうになったときに通知を受け、event.preventDefault()を使って一時停止する。
  準備が完了したら、event.detail.resume()を呼び出してリクエストを続行する。
  #+begin_src js
  // リクエストにAuthorization headerを追加する
  document.addEventListener("turbo:before-fetch-request", async (event) => {
    event.preventDefault()
    const token = await getSessionToken(window.app)
    event.detail.fetchOptions.headers["Authorization"] = `Bearer ${token}`
    event.detail.resume()
  })
  #+end_src

* Performing Visits With a Different Method
- 普通はgetメソッドだけど、data-turbo-methodで変更できる
  #+begin_src html
  <a href="/articles/54" data-turbo-method="delete">Delete</a>
  #+end_src
* Requiring Confirmation for a Visit
- confim呼び出せるよ
  #+begin_src html
  <a href="/articles" data-turbo-method="get" data-turbo-confirm="Do you want to leave this page?">Back to page</a>
  <a href="/article/54" data-turbo-method="delete" data-turbo-confirm="Are you sure want to delete?">delete</a>
  #+end_src

* Dsabling Turbo Drive on Specific Links or Forms
- data-turbo="false"
  #+begin_src html
  <a href="/" data-turbo="false">Disabled</a>

  <form action="/messages" method="post" data-turbo="false">
  </form>

  <div data-turbo="false">
    <a href="/">Disabled</a>
    <form action="/messages" method="post">
    </form>
  </div>
  #+end_src
  子で有効にする場合は、data-turbo="true"を使う
  #+begin_src html
  <div data-turbo="false">
    <a href="/" data-turbo="true">Enabled</a>
  </div>
  #+end_src

* View Transition
- 現在のページと次のページの両方に下記のメタタグがある場合、view遷移をトリガーする
  #+begin_src html
  <meta name="view-transition" content="same-origin">
  #+end_src
  <html>要素にdata-turbo-visit-direction属性を指定することで、遷移の方向を決めれる
  #+begin_src html
  html[data-turbo-visit-direction="forward"]::view-transition-old(sidebar):only-child {
    animation: slide-to-right 0.5s ease-out;
  }
  #+end_src

* Displaying Progress
- navigation中にはブラウザネイティブのではなく、CSSベースのプログレスバーを表示させる
  turbo-progress-barを持つ<div>要素。
  #+begin_src css
  /* 変更できるよ */
  .turbo-progress-bar {
      height: 5px;
      background-color: green;
  }

  /* 無効にもできるよ */
  .turbo-progress-bar {
      visibility: hidden;
  }
  #+end_src
* Reloading When Assets Change
- asset要素にdata-turbo-track="reload"のアノテーションをつけてURLにバージョン識別子を含めることで、
  CSS, JavaScriptが変更されたときにfetchではなくブラウザをリロードしているらしい。
  どうやって差分検出しているのだろう
  #+begin_src html
  <head>
    <link rel="stylesheet" href="/application-258e88d.css" data-turbo-track="reload">
    <script src="/application-cbd3cd4.js" data-turbo-track="reload"></script>
  </head>
  #+end_src

* Removing Assets When They Change
- [data-turbo-track="dynamic"]で<link>要素または<style>要素をレンダリングすると、Turbo Driveはナビゲーションの応答から
  その要素が亡くなったときに動的にその要素を削除するよう指示するらしい。
  使い所がいまいちわからん
  #+begin_src html
  <head>
    <link rel="stylesheet" href="/page-specific-styles-258e88d.css" data-turbo-track="dynamic">
    <style data-turbo-track="dynamic">
      .page-specific-styles { ... }
    </style>
  </head>
  #+end_src

* Ensuring Specific Pages Trigger a Full Reload
- 特定のページへのvisitがフルリロードするように
  #+begin_src html
  <head>
    <meta name="turbo-visit-control" content="reload">
  </head>
  #+end_src

* Setting a Root Location
- <head>に<meta name="turbo-root">要素を含めることで、Turbo Driveを特定のroot locationにスコープすることができる。
  #+begin_src html
  <head>
    <meta name="turbo-root" content="/app">
  </head>
  #+end_src

* Form Submissions
- turbo driveではlink clickと同様な方法でフォーム送信の処理をする。ステートレスなHTTP GETリクエストしか発行されない。
  <form>送信中に他の変更を加えたい場合は、独自のイベントリスナーを宣言できる
  #+begin_src js
  addEventListener("turbo:submit-start", ({ target }) => {
    for (const field of target.elements) {
      field.disabled = true
    }
  })
  #+end_src

* Rendirecting After a Form Submission
- turboがpostリクエストからの200系で通常のレンダリングを許可しないのは、ブラウザにはpostアクセス時にリロードするための動作があり、
  turboが複製できない「このフォームをもう一度送信してもよろしいですか」ダイアログが表示されるから。
  その代わり、turboはレンダリングしようとするフォーム送信時に、フォームアクションに変更するのではなく現在のURLに留まる。
  リロードすると存在しないかもしれないURLにgetしてしまうかもしれないから。
- フォーム送信がgetリクエストの場合、フォームにdata-turbo-frameターゲットを追加することで、直接レンダリングされたレスポンスをレンダリングできる。
  レンダリングの一部としてURLを更新したい場合は、data-turbo-action属性も渡す。
